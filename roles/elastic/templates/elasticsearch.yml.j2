# ======================== Elasticsearch Configuration =========================
#
# NOTE: Elasticsearch comes with reasonable defaults for most settings.
#       Before you set out to tweak and tune the configuration, make sure you
#       understand what are you trying to accomplish and the consequences.
#
# The primary way of configuring a node is via this file. This template lists
# the most important settings you may want to configure for a production cluster.
#
# Please consult the documentation for further information on configuration options:
# https://www.elastic.co/guide/en/elasticsearch/reference/index.html
#
# ---------------------------------- Cluster -----------------------------------
#
# Use a descriptive name for your cluster:
#
{% if elasticsearch_type == 'cluster' %}cluster.name: {{ elasticsearch_cluster_name }}{% else %}#cluster.name: {% endif %}{{''}}
#
# ------------------------------------ Node ------------------------------------
#
# Use a descriptive name for the node:
#
node.name: {{ node_name }}
#
# Add custom attributes to the node:
#
#node.attr.rack: r1
#
# ----------------------------------- Paths ------------------------------------
#
# Path to directory where to store the data (separate multiple locations by comma):
#
path.data: /var/lib/elasticsearch/data
#
# Path to log files:
#
path.logs: /var/lib/elasticsearch/logs
#
# ----------------------------------- Memory -----------------------------------
#
# Lock the memory on startup:
#
bootstrap.memory_lock: true
#
# Make sure that the heap size is set to about half the memory available
# on the system and that the owner of the process is allowed to use this
# limit.
#
# Elasticsearch performs poorly when the system is swapping the memory.
#
# ---------------------------------- Network -----------------------------------
#
# Set the bind address to a specific IP (IPv4 or IPv6):
#
network.host: {{ node_ip }},_local_
#
# Set a custom port for HTTP:
#
http.port: 9200
#
# For more information, consult the network module documentation.
#
# --------------------------------- Discovery ----------------------------------
#
# Pass an initial list of hosts to perform discovery when this node is started:
# The default list of hosts is ["127.0.0.1", "[::1]"]
#
{% if elasticsearch_type == 'cluster' %}discovery.seed_hosts: [{% for master in groups['masters'] %}{% if loop.last %}"{{ hostvars[master].node_ip }}"{% else %}"{{ hostvars[master].node_ip }}", {% endif %}{% endfor %}]{% else %}#discovery.seed_hosts: {% endif %}{{''}}
#
# Bootstrap the cluster using an initial set of master-eligible nodes:
#
{% if elasticsearch_type == 'cluster' %}cluster.initial_master_nodes: [{% for master in groups['masters'] %}{% if loop.last %}"{{ hostvars[master].node_ip }}"{% else %}"{{ hostvars[master].node_ip }}", {% endif %}{% endfor %}]{% else %}#cluster.initial_master_nodes: {% endif %}{{''}}
#
# For more information, consult the discovery and cluster formation module documentation.
#
# ---------------------------------- Gateway -----------------------------------
#
# Block initial recovery after a full cluster restart until N nodes are started:
#
{% if elasticsearch_type == 'cluster' %}gateway.recover_after_nodes: {{ elasticsearch_gateway_after_nodes }}{% else %}#gateway.recover_after_nodes: {% endif %}{{''}}
#
# For more information, consult the gateway module documentation.
#
# ---------------------------------- Various -----------------------------------
#
# Require explicit names when deleting indices:
#
#action.destructive_requires_name: true
#action.auto_create_index: "*"
#
transport.tcp.port: 9300
#
http.cors.enabled: true
http.cors.allow-origin: "*"
#
xpack.license.self_generated.type: basic
xpack.security.enabled: true
{% if elasticsearch_type == 'cluster' %}
xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.verification_mode: certificate
xpack.security.transport.ssl.keystore.path: /etc/elasticsearch/certs/elastic-certificates.p12
xpack.security.transport.ssl.truststore.path: /etc/elasticsearch/certs/elastic-certificates.p12
{%- endif %}
#
discovery.type: {% if elasticsearch_type == 'cluster' %}zen{% else %}single-node{% endif %}{{''}}
{% if elasticsearch_type == 'cluster' %}discovery.zen.minimum_master_nodes: {{ elasticsearch_zen_minimum_node }}{% else %}#discovery.zen.minimum_master_nodes: {% endif %}{{''}}
#
node.master: {% if inventory_hostname in groups['masters'] %}true{% else %}false{% endif %}{{''}}
node.ingest: {% if inventory_hostname in groups['ingests'] %}true{% else %}false{% endif %}{{''}}
node.data: {% if inventory_hostname in groups['datas'] %}true{% else %}false{% endif %}{{''}}
